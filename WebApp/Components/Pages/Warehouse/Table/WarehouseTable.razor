@using Domain.Model.Models.Output.Warehouse
@using Domain.Model.Models.Output.Platform
@inherits LayoutComponentBase
@inject IHttpClientFactory ClientFactory
@rendermode InteractiveServer
@inject DialogService DialogService


@using Model;
@using WebApp.Components.Pages.Warehouse.Input.Platform
<div class="page">
    <main>
        <div class="WarehouseTable">
            <div class="table-sizes">
            <RadzenDataGrid Data="@warehouses"ColumnWidth="100px"AllowFiltering="true" FilterPopupRenderMode="PopupRenderMode.OnDemand"FilterMode="FilterMode.Advanced"
                            AllowPaging="true"  PageSize="5" SelectionMode="DataGridSelectionMode.Single 
                            "AllowColumnResize="true" GridLines="DataGridGridLines.Both">
                <Columns>
                    <RadzenDataGridColumn Title="Номер склада" Property="@nameof(WarehouseOutput.Name)" Width="80px" TextAlign="TextAlign.Center" />
                    <RadzenDataGridColumn Title="Номер площадки" Width="80px" TextAlign="TextAlign.Center">
                        <Template Context="warehouse">
                            <ul>
                                @foreach (var platform in @warehouse.Platforms)
                                {
                                    <b>@platform.Number</b>
                                }
                            </ul>
                        </Template>
                    </RadzenDataGridColumn>
                    <RadzenDataGridColumn Title="Номер пикета" Width="80px" TextAlign="TextAlign.Center">
                        <Template Context="warehouse">
                            <ul>
                                @foreach (var platform in @warehouse.Platforms)
                                {
                                    @foreach (var picket in platform.Pickets)
                                    {
                                        <b>@picket.Number</b>
                                    }
                                }
                            </ul>
                        </Template>
                    </RadzenDataGridColumn>
                    <RadzenDataGridColumn Title="Груз на площадке(т)" Width="80px" TextAlign="TextAlign.Center">
                        <Template Context="warehouse">

                            @foreach (var platform in @warehouse.Platforms)
                            {
                                <b>@platform.Cargo</b>
                            }

                        </Template>
                    </RadzenDataGridColumn>
                    <RadzenDataGridColumn Title="Действие" Width="80px" TextAlign="TextAlign.Center">
                        <Template Context="data">
                                <RadzenButton Click="@(args => EditPlatformDialog(data))">Edit</RadzenButton>
                        </Template>
                    </RadzenDataGridColumn>
                </Columns>
            </RadzenDataGrid>
            </div>
        </div>

    </main>
</div>

@code {
    [Inject] private IHttpClientFactory HttpClientFactory { get; set; } = default!;
    private IEnumerable<WarehouseOutput>? warehouses;


    protected override async Task OnInitializedAsync()
    {
        var httpClient = HttpClientFactory.CreateClient();
        try
        {
            warehouses = await httpClient.GetFromJsonAsync<IEnumerable<WarehouseOutput>>("https://localhost:7294/Warehouse/Warehouse-list");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error: {ex.Message}");
        }
        finally
        {
            StateHasChanged();  // Обновляем UI
        }
    }
    private async Task EditPlatformDialog(WarehouseOutput warehouseOutput)
    {
        var parametrs = new Dictionary<string, object>() { { "warehouseOutput", warehouseOutput } };
        var options = new Radzen.DialogOptions() { Width = "700px", Height = "450px" };
        await DialogService.OpenAsync<EditDialog>("Edit platform",parametrs,options);
    }
}

@rendermode InteractiveAuto
@using Domain.Model.Models.Input
@using Domain.Model.Models.Output
@using Model

@inject DialogService DialogService

<main>

<div class="buttonCreate">
        <EditForm FormName="Добавление пикета" Model="@updateWarehouseModel" OnSubmit="UpdatePlatform">
            <DataAnnotationsValidator />
            <ValidationSummary />

            <div class="form-group">
                <RadzenLabel>Платформа</RadzenLabel>
                <RadzenDropDown @bind-Value="updateWarehouseModel.PlatformID" Data="Warehouses.SelectMany(x=>x.Platforms.Select(x=>x.Number))" Style="width: 100%;" />

                <RadzenText TextStyle="TextStyle.Subtitle2" TagName="TagName.H3">Груз на площадке(т)</RadzenText>
                <RadzenNumeric @bind-Value="updateWarehouseModel.Cargo" aria-label="Default TextBox" />
            </div>

            <RadzenButton class="button-form-save" ButtonType="ButtonType.Submit">Сохранить</RadzenButton>
            <RadzenButton class="button-form-cancel" ButtonType="ButtonType.Button" Click="CloseDialog">Закрыть</RadzenButton>
        </EditForm>
</div>
</main>

@code {
    [Parameter]
    public IEnumerable<WarehouseOutput> Warehouses { get; set; }

    private UpdateWarehouseModel updateWarehouseModel = new();

    private async Task UpdatePlatform()
    {

        try
        {
            
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error: {ex.Message}");
        }
    }
    private void CloseDialog()
    {
        DialogService.Close();
    }

}
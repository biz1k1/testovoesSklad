@rendermode InteractiveAuto
@using Domain.Model.Models.Input
@using Domain.Model.Models.Output
@using Model
@using Web.Services

@inject DialogService DialogService
@inject WarehouseService WarehouseService

<main>

<div >
        <EditForm FormName="Обновление склада" Model="@updateWarehouseModel" OnSubmit="UpdatePlatform">
            <DataAnnotationsValidator />
            <ValidationSummary />

            <div class="form-group">
                <RadzenLabel>Площадка</RadzenLabel>
                <RadzenDropDown  Placeholder="Номер площадки" @bind-Value="updateWarehouseModel.PlatformID" Data=@platforms ValueProperty="@nameof(PlatformOutput.Id)" TextProperty="@nameof(PlatformOutput.Number)"  Style="width: 100%;" />

                <RadzenText TextStyle="TextStyle.Subtitle2" TagName="TagName.H3">Груз на площадке(т)</RadzenText>
                <RadzenNumeric Placeholder="Номер пикета" @bind-Value="updateWarehouseModel.Cargo"  aria-label="Default TextBox" />

                <RadzenLabel style="margin-top:70px; float:left">Пикет</RadzenLabel>
                <RadzenDropDown Placeholder="Номер пикета" @bind-Value="updateWarehouseModel.PicketId" Data=@pickets ValueProperty="@nameof(PicketOutput.Id)" TextProperty="@nameof(PicketOutput.Number)" Style="width: 100%;" />
            </div>

            <RadzenButton class="button-form-save" ButtonType="ButtonType.Submit">Сохранить</RadzenButton>
            <RadzenButton class="button-form-cancel" ButtonType="ButtonType.Button" Click="CloseDialog">Закрыть</RadzenButton>
        </EditForm>
</div>
</main>

@code {
    [Parameter]
    public IEnumerable<WarehouseOutput> Warehouses { get; set; }

    private IEnumerable<PlatformOutput> platforms;
    private IEnumerable<PicketOutput> pickets;

    private UpdateWarehouseModel updateWarehouseModel = new();

    protected override void OnInitialized()
    {
        platforms = Warehouses.SelectMany(x => x.Platforms);

        pickets = platforms.SelectMany(x => x.Pickets);

    }

    private async Task UpdatePlatform()
    {
        await WarehouseService.UpdateWarehouseAsync(updateWarehouseModel);

        DialogService.Close();

    }
    private void CloseDialog()
    {
        DialogService.Close();
    }

}
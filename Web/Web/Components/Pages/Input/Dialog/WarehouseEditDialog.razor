@rendermode InteractiveAuto
@using Domain.Model.Models.Input
@using Domain.Model.Models.Output
@using Model
@inject DialogService DialogService

<main>

<div class="buttonCreate">
      @*   <EditForm Model="warehouseOutput" OnSubmit="UpdatePlatform" >


        <RadzenButton ButtonType="ButtonType.Submit">Сохранить</RadzenButton>
        <RadzenButton ButtonType="ButtonType.Button" Click="CloseDialog">Закрыть</RadzenButton>
    </EditForm> *@
</div>
</main>

@code {
    [Parameter]
    public WarehouseOutput warehouseOutput { get; set; } = new();


    [Inject] private IHttpClientFactory HttpClientFactory { get; set; } = default!;
    private async Task UpdatePlatform()
    {
        var httpClient = HttpClientFactory.CreateClient();

        try
        {
            await httpClient.PostAsync("https://localhost:7294/Warehouse/Warehouse", null);
            StateHasChanged();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error: {ex.Message}");
        }
    }
    private void CloseDialog()
    {
        DialogService.Close();
    }

}
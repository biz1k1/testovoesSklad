@rendermode InteractiveAuto
@using Domain.Model.Models.Input
@using Domain.Model.Models.Output
@using Model
@using System.Text.Json
@using System.Text
@using Web.Services

@inject PlatformService PlatformService
@inject DialogService DialogService

<main>

    <div>
        <EditForm FormName="Добавление платформы" Model="@platformModel" OnSubmit="UpdatePlatform">
            <DataAnnotationsValidator />
            <ValidationSummary />

            <div class="form-group">
                <label>Выберите склад, который привяжется к площадке:</label>
                <RadzenDropDown Placeholder="Выберите платформу" @bind-Value="platformModel.WarehouseId" Data=Warehouses
                                TextProperty="@nameof(WarehouseOutput.Name)" ValueProperty="@nameof(WarehouseOutput.Id)" Style="width: 100%;" />

                <RadzenText  TextStyle="TextStyle.Subtitle2" TagName="TagName.H3">Груз на площадке(т)</RadzenText>
                <RadzenNumeric Placeholder="Номер платформы" @bind-Value="platformModel.Cargo" aria-label="Default TextBox" />

            </div>

            <RadzenButton class="button-form-save" ButtonType="ButtonType.Submit">Сохранить</RadzenButton>
            <RadzenButton class="button-form-cancel" ButtonType="ButtonType.Button" Click="CloseDialog">Закрыть</RadzenButton>
        </EditForm>
    </div>
</main>

@code {
    [Parameter]
    public IEnumerable<WarehouseOutput>? Warehouses { get; set; }

    private CreatePlatformModel platformModel=new();


    private async Task UpdatePlatform()
    {

        await PlatformService.AddPlatform(platformModel);

        DialogService.Close();
    }

    private void CloseDialog()
    {
        DialogService.Close();
    }

}
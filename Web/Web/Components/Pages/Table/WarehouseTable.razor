@rendermode InteractiveServer
@using Domain.Model.Models.Output
@inherits LayoutComponentBase
@inject IHttpClientFactory ClientFactory
@inject DialogService DialogService
@using Model;
@using Web.Components.Pages.Input
@using Web.Components.Pages.Input.Dialog
<div class="page">
    <main>
        <div class="WarehouseTable">
            <div class="table-sizes">
                <RadzenDataGrid Data="@warehouses" ColumnWidth="100px" AllowFiltering="true" FilterPopupRenderMode="PopupRenderMode.OnDemand" FilterMode="FilterMode.Advanced"
                                AllowPaging="true" PageSize="5" SelectionMode="DataGridSelectionMode.Single
                            " AllowColumnResize="true" GridLines="DataGridGridLines.Both">
                    <Columns>
                        <RadzenDataGridColumn Title="Номер склада" Property="@nameof(WarehouseOutput.Name)" Width="80px" TextAlign="TextAlign.Center" />
                        <RadzenDataGridColumn Title="Номер площадки" Width="80px" TextAlign="TextAlign.Center">
                            <Template Context="warehouse">
                                <ul>
                                    @foreach (var platform in @warehouse.Platforms)
                                    {
                                        <b>@platform.Number</b>
                                    }
                                </ul>
                            </Template>
                        </RadzenDataGridColumn>
                        <RadzenDataGridColumn Title="Номер пикета" Width="80px" TextAlign="TextAlign.Center">
                            <Template Context="warehouse">
                                <ul>
                                    @foreach (var platform in @warehouse.Platforms)
                                    {
                                        @foreach (var picket in platform.Pickets)
                                        {
                                            <b>@picket.Number</b>
                                        }
                                    }
                                </ul>
                            </Template>
                        </RadzenDataGridColumn>
                        <RadzenDataGridColumn Title="Груз на площадке(т)" Width="80px" TextAlign="TextAlign.Center">
                            <Template Context="warehouse">

                                @foreach (var platform in @warehouse.Platforms)
                                {
                                    <b>@platform.Cargo</b>
                                }

                            </Template>
                        </RadzenDataGridColumn>
                    


                    </Columns>

                </RadzenDataGrid>
            </div>
        </div>
    </main>
</div>

@code {
    private IEnumerable<PlatformOutput>? platforms;
    private IEnumerable<PicketOutput>? pickets;
    private IEnumerable<string> com;
    string value = "Around the Horn";

    [Parameter]
    public IEnumerable<WarehouseOutput>? warehouses{ get; set;}


    protected override async Task OnInitializedAsync()
    {
        try
        {
            platforms = warehouses.SelectMany(x => x.Platforms);
            pickets = platforms.SelectMany(x => x.Pickets);
            com = warehouses.Select(x => x.Name);
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error: {ex.Message}");
        }
        finally
        {
            StateHasChanged(); 
        }
    }
    private async Task EditPlatformDialog(WarehouseOutput warehouseOutput)
    {
        var parametrs = new Dictionary<string, object>() { { "warehouseOutput", warehouseOutput } };
        var options = new Radzen.DialogOptions() { Width = "700px", Height = "450px" };
        await DialogService.OpenAsync<WarehouseEditDialog>("Edit platform", parametrs, options);
    }
  

}
